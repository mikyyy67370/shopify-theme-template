<div class="toast-container fixed bottom-4 right-4 z-50"
     x-data="{ notifications: [] }"
     @notification.window="notifications.push($event.detail); setTimeout(() => { notifications.shift() }, $event.detail.duration || 3000)">
  
  <template x-for="notification in notifications" :key="notification.id">
    <div class="toast-notification mb-3"
         x-show="true"
         x-transition:enter="transform transition ease-out duration-300"
         x-transition:enter-start="translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2"
         x-transition:enter-end="translate-y-0 opacity-100 sm:translate-x-0"
         x-transition:leave="transition ease-in duration-100"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0">
      
      <div class="max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5">
        <div class="p-4">
          <div class="flex items-start">
            <!-- Success Icon -->
            <template x-if="notification.type === 'success'">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              </div>
            </template>
            
            <!-- Error Icon -->
            <template x-if="notification.type === 'error'">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              </div>
            </template>
            
            <!-- Info Icon -->
            <template x-if="notification.type === 'info'">
              <div class="flex-shrink-0">
                <svg class="h-6 w-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              </div>
            </template>
            
            <div class="ml-3 w-0 flex-1">
              <p class="text-sm font-medium text-gray-900" x-text="notification.title"></p>
              <p class="mt-1 text-sm text-gray-500" x-text="notification.message"></p>
            </div>
            
            <div class="ml-4 flex-shrink-0 flex">
              <button class="rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none"
                      @click="notifications = notifications.filter(n => n.id !== notification.id)">
                <span class="sr-only">Close</span>
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </template>
</div>

<script>
// Helper function to show notifications
function showNotification(type, title, message, duration = 3000) {
  window.dispatchEvent(new CustomEvent('notification', {
    detail: {
      id: Date.now(),
      type,
      title,
      message,
      duration
    }
  }));
}

// Example usage:
// showNotification('success', 'Added to cart', 'Item has been added to your cart');
// showNotification('error', 'Error', 'Could not add item to cart');
// showNotification('info', 'Note', 'This item is on sale!');
</script>

<style>
.toast-notification {
  animation: slide-in 0.3s ease-out;
}

@keyframes slide-in {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.toast-container {
  pointer-events: none;
}

.toast-notification {
  pointer-events: auto;
}
</style>
